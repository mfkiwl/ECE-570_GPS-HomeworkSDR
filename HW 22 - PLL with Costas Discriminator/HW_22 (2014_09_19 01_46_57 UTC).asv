% PLL.m
% Description:  Implements 2nd order PLL based on bilinear transformation. 
% Inputs:       f0, ADC output center, Hz
%               fs, Sampling frequency, Hz
%               TI, Integration time, ms
%               nd,Correlator spacing, samples
%               B, Filter equivalent noise bandwidth
%               PRN, PRN of desired SV
%               fdEst, estimated Doppler frequency, Hz
%               n0Est, estimated code phase
% Outputs:      L, DLL discriminator output for 100 ms of data
%               Lp, filtered output of DLL discriminator values for 100 ms
%               of data
%               Plots of L and Lp
% Date:         02/08/2011
% Modified:     05/01/2011 (Jared Morell)
% Author:       Jade Morton

clc
clear all
close all

% Second order PLL without code tracking loop feedback
% Constants
fs=5e6; % Sampling frequency
f0=1.25e6; % Output center frequency
TI=1; % Integration time in ms
n1=fs*1e-3; % Number of samples in 1 ms
nTI=TI*fs*1e-3; % Number of samples in integration time
rad2deg=180/pi; % Convert radians to degrees
% PLL parameters
a2 = 1.4; % Damping factor;
B = 5; % Equivalent noise bandwidth in Hz
wn = B*4/(a2+1/a2);
% Bilinear transformation transfer function coefficients
wnTI = wn*TI*1e-3; wnTI2 = (wnTI)^2; wnTIa2 = wnTI*a2*2;
b0 = wnTI2 + wnTIa2;
b1 = 2*wnTI2;
b2 = wnTI2 - wnTIa2;
d0 = wnTI2 + wnTIa2 + 4;
d1 = 2*wnTI - 8;
d2 = wnTI2 - wnTIa2 + 4;
% User inputs: parameters used to simulate the signal
PRN = 4; fdEst = 1000; n0Est = 100; phi0=0;
% Read input data
fileName = 'simGPSL1_4SVs_1000ms.dat';
fid = fopen(fileName,'r');
x = fread(fid,'schar'); fclose(fid);
ns = length(x);
% Inputs from acquisition or prior tracking
fdTrk = fdEst;
xb = x'.*exp(-j*2*pi*(f0+fdTrk)*[0:ns-1]/fs);
Code = CASamples(TI,fs,fdTrk,PRN);
CP = [Code(nTI-n0Est+2:nTI) Code(1:nTI-n0Est+1)];
for ii=1:2
xTI=xb((ii-1)*nTI+1:ii*nTI);
[L2(ii),ZP(ii)]=CostasDiscriminator2(xTI,CP);
Lf(ii) = L2(ii);
end
nBlocks = floor(ns/nTI);
for ii = 3:nBlocks
xTI=xb((ii-1)*nTI+1:ii*nTI);
[L2(ii), ZP(ii)] = CostasDiscriminator2(xTI, CP);
Lf(ii)=(b0*L2(ii)+b1*L2(ii-1)+b2*L2(ii-2)-d1*Lf(ii-1)-
d2*Lf(ii-2))/d0;
end


